import QtQuick
import QtCore
import Quickshell
import Quickshell.Io
import Quickshell.Hyprland

Item {
    id: pinnedAppsManager
    
    // Properties
    property var pinnedApps: []
    property string pinnedAppsFilePath: StandardPaths.writableLocation(StandardPaths.HomeLocation) + "/.local/state/Quickshell/Dock/PinnedApps.conf"
    
    Component.onCompleted: {
        // Initialize with empty array, FileView will load the data
        pinnedApps = [];
    }
    
    // FileView to manage pinned apps storage (like HyprlandDE-Quickshell)
    FileView {
        id: pinnedAppsFileView
        path: pinnedAppsFilePath
        
        onLoaded: {
            try {
                var content = text();
                if (content && content.trim() !== '') {
                    var arr = JSON.parse(content);
                    if (Array.isArray(arr)) {
                        pinnedApps = arr;
                    }
                }
            } catch (e) {
                pinnedApps = [];
            }
        }
        
        onLoadFailed: {
            pinnedApps = [];
            // Create the file with empty list
            savePinnedApps();
        }
    }
    
    // Save pinned apps to configuration file (like HyprlandDE-Quickshell)
    function savePinnedApps() {
        try {
            // Create the directory if it doesn't exist
            var dirPath = pinnedAppsFilePath.replace('file://', '').replace('/PinnedApps.conf', '');
            Hyprland.dispatch(`exec mkdir -p '${dirPath}'`);
            
            // Write the JSON content to the file
            var jsonContent = JSON.stringify(pinnedApps, null, 2);
            Hyprland.dispatch(`exec echo '${jsonContent.replace(/'/g, "'\"'\"'")}' > '${pinnedAppsFilePath.replace('file://', '')}'`);
            
            // Reload the FileView to reflect changes
            pinnedAppsFileView.reload();
        } catch (e) {
            // Error handling without logging
        }
    }
    
    // Check if an app is pinned
    function isPinned(appId) {
        return pinnedApps.findIndex(app => 
            app.id === appId || app.class === appId || app.execString === appId
        ) !== -1
    }
    
    // Pin an app to the dock
    function pinApp(appInfo) {
        if (!appInfo) return
        
        const appId = appInfo.class || appInfo.id || appInfo.execString
        if (!appId) return
        
        // Check if already pinned
        const existingIndex = pinnedApps.findIndex(app => 
            app.id === appId || app.class === appId || app.execString === appId
        )
        
        if (existingIndex === -1) {
            // Add the full app info to pinned apps
            pinnedApps.push(appInfo)
            savePinnedApps()
            pinnedAppsChanged()
        }
    }
    
    // Unpin an app from the dock
    function unpinApp(appId) {
        const index = pinnedApps.findIndex(app => 
            app.id === appId || app.class === appId || app.execString === appId
        )
        if (index > -1) {
            pinnedApps.splice(index, 1)
            savePinnedApps()
            pinnedAppsChanged()
        }
    }
    
    // Get all pinned apps
    function getPinnedApps() {
        return pinnedApps
    }
    
    // Clear all pinned apps
    function clearPinnedApps() {
        pinnedApps = []
        savePinnedApps()
        pinnedAppsChanged()
    }
    
    // The pinnedAppsChanged signal is automatically generated by Qt for the pinnedApps property
} 